from numpy import random
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.cluster.vq import kmeans, vq
from data import load_comic_con_data


def impact_of_seed_on_distinct_clusters(comic_con):
    # Initialize seed
    random.seed([1, 2, 1000])

    # Run kmeans clustering
    cluster_centers, distortion = kmeans(
        comic_con[['x_scaled', 'y_scaled']], 2)
    comic_con['cluster_labels'], distortion_list = vq(
        comic_con[['x_scaled', 'y_scaled']], cluster_centers)

    # Plot the scatterplot
    sns.scatterplot(x='x_scaled', y='y_scaled',
                    hue='cluster_labels', data=comic_con)
    plt.show()


def uniform_clustering_patterns():
    x_scaled = np.array([2.20945827, 2.4920832, 2.33110278, 2.12280551, 4.04793487,
                         3.5070117, 2.11911304, 3.608467, 4.44184145, 3.47527685,
                         4.4167625, 2.1422771, 4.0295217, 4.04854284, 2.4290494,
                         3.15631583, 2.31474493, 4.27917593, 2.48035196, 4.27168374,
                         2.71351322, 3.15769777, 2.7275978, 3.37653332, 2.94676486,
                         2.4799151, 3.6767325, 3.39501233, 2.88570231, 2.63062069,
                         3.49572107, 2.99194488, 3.52203433, 3.43650606, 3.47339227,
                         4.14439818, 4.26484651, 3.24373555, 3.16857828, 3.13265362,
                         2.91331693, 4.25966212, 2.64712443, 2.86558768, 2.14411944,
                         2.81608671, 4.00777127, 3.12431291, 3.10283008, 3.30368161,
                         2.96415134, 3.14227824, 3.26889916, 2.43482262, 3.47546827,
                         2.12665718, 3.03908822, 3.58165587, 3.99082809, 4.06052889,
                         3.11811524, 4.26835585, 2.35940147, 3.97229283, 2.88533579,
                         2.63124096, 3.73068812, 2.3537661, 2.31975732, 2.76673228,
                         3.89071818, 2.1278711, 3.63957622, 4.27204323, 2.97068593,
                         3.97894366, 3.79592979, 4.1168214, 3.60793748, 2.97477948,
                         2.97621075, 3.04904962, 4.45364564, 4.04167354, 3.19337867,
                         2.95971899, 3.3160056, 3.42850115, 2.55249151, 3.19538216,
                         3.78631709, 2.69834901, 4.19718135, 2.28425191, 3.17038293,
                         2.78166619, 3.7558543, 3.20120698, 3.35418861, 4.06439525,
                         1.75063023, 1.75788225, 2.12379536, 1.76811599, 1.35531301,
                         2.25988299, 1.78284781, 2.51990336, 1.78467838, 1.45132116,
                         1.53676877, 1.87081305, 2.20719166, 1.84079477, 2.48406675,
                         1.94922564, 1.85288348, 2.06891994, 1.64431615, 1.87038827,
                         2.10334676, 1.72106956, 1.87183105, 1.7007181, 2.23630281,
                         1.56709779, 2.01094276, 2.11163624, 1.48462246, 2.29918505,
                         4.57749514, 5.19107863, 4.28691262, 4.46668204, 4.9839113,
                         5.17013299, 4.22916807, 4.63850132, 5.1095709, 4.14937709,
                         4.40513021, 4.51021692, 4.42159576, 5.0137716, 4.04410145,
                         4.40197189, 4.69001028, 4.25747076, 5.06033359, 5.19569506,
                         5.04333261, 4.47291753, 4.30317468, 4.66706987, 4.55494928,
                         4.59784015, 4.73696781, 4.4136104, 4.13810193, 4.92157466])
    y_scaled = np.array([2.97752364, 2.72701061, 3.80820766, 3.79494789, 3.13030317,
                         2.38448766, 2.78706901, 3.48522942, 3.46956378, 2.09825382,
                         3.15738361, 3.59709454, 4.03417326, 4.32670304, 3.19932237,
                         4.47851787, 3.58828354, 3.43900332, 2.64157501, 2.93709554,
                         3.99361599, 3.00814668, 2.37511614, 3.77782557, 4.04954387,
                         2.94118783, 3.2852875, 3.83128931, 2.7685581, 3.45399777,
                         3.68676831, 2.90608415, 4.07674815, 2.94331168, 2.96620408,
                         3.18238829, 3.16611538, 3.05422122, 3.76636223, 3.75420624,
                         4.0932718, 3.74916643, 3.03852537, 3.25703721, 2.72891607,
                         4.30086117, 4.14324569, 3.86664723, 3.21892988, 3.2362716,
                         2.69662641, 2.02067441, 4.3230521, 2.76771248, 4.59250627,
                         3.71423041, 2.62892061, 2.54715643, 2.62903808, 2.56937398,
                         2.38833514, 3.026197, 3.79177256, 3.40384809, 2.71258364,
                         2.72956542, 3.86106623, 2.88227298, 2.83355527, 2.60463699,
                         2.82950795, 3.80748749, 2.27196917, 4.06532075, 2.02381417,
                         4.31357804, 4.20355679, 4.17353503, 2.37972788, 3.50832608,
                         2.47117757, 2.10050839, 3.1282213, 3.37473814, 2.77101192,
                         3.27546221, 3.4879047, 2.71202278, 4.37154703, 3.08916543,
                         4.2152846, 3.01444646, 2.89872007, 3.09001466, 2.58111562,
                         3.67885139, 4.50306158, 2.38924076, 3.97848561, 3.62797096,
                         5.48658076, 5.1696083, 5.00088377, 4.5708264, 4.83124261,
                         4.9555821, 4.68348673, 5.04905451, 5.34592292, 4.65576271,
                         4.52539364, 5.56034832, 5.569496, 4.68987066, 4.79022115,
                         5.28055013, 4.96219671, 5.39120155, 5.29529544, 5.47474081,
                         4.8026844, 4.94805339, 4.56593656, 4.86086423, 5.34016576,
                         5.48101543, 4.403106, 4.86537473, 4.81100369, 4.8893996,
                         5.18401585, 5.04021381, 4.45947096, 5.47215469, 5.15509165,
                         4.88681068, 5.52744376, 5.61627163, 4.76083012, 4.52105463,
                         5.56323095, 4.92283162, 5.18342014, 4.92206181, 4.98301344,
                         5.15469649, 4.7144995, 4.95199912, 5.32952697, 4.86423371,
                         4.65106585, 5.13800738, 5.15023422, 5.08770112, 4.90425248,
                         4.72219848, 5.0694421, 4.68441128, 5.21139276, 4.53982605])
    mouse = pd.DataFrame({"x_scaled": x_scaled, "y_scaled": y_scaled})
    # Generate cluster centers
    cluster_centers, distortion = kmeans(mouse[["x_scaled", "y_scaled"]], 3)

    # Assign cluster labels
    mouse['cluster_labels'], distortion_list = vq(
        mouse[["x_scaled", "y_scaled"]], cluster_centers)

    # Plot clusters
    sns.scatterplot(x='x_scaled', y='y_scaled',
                    hue='cluster_labels', data=mouse)
    plt.show()


sns.set()
# comic_con = load_comic_con_data()
# impact_of_seed_on_distinct_clusters(comic_con)
uniform_clustering_patterns()
